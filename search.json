[
  {
    "objectID": "viewer.html",
    "href": "viewer.html",
    "title": "Parquet Viewer",
    "section": "",
    "text": "Upload your parquet file to view and edit.\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\n\n### Edit this comment to render changes if only made to app.R\n# app.R edited: 2025-07-16 13:32\n\n# import app code\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\n\ndbtn &lt;- function(...) {\n  btn &lt;- downloadButton(...)\n  btn$attribs$download &lt;- NULL\n  return(btn)\n}\n\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = 'open',\n                    actionButton(\"add_row\", \"Add Row\", disabled=TRUE),\n                    actionButton(\"del_row\", \"Delete Row\", disabled=TRUE),\n                    actionButton(\"show_add_col\", \"Add Col\", disabled=TRUE),  uiOutput(\"add_col_inputs\"),\n                    uiOutput(\"col_order_ui\"),\n                    uiOutput(\"download_parquet_placeholder\"),\n                    uiOutput(\"download_csv_placeholder\"),\n                    fileInput(\"file\", \"Upload a .parquet file\", accept = \".parquet\", width = \"100%\")\n  ),\n  fluidRow(DTOutput(\"table\")),\n  \n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactiveVal(NULL)\n  \n  # Place a disabled action button as download button initially\n  output$download_parquet_placeholder &lt;- renderUI(actionButton(\"no_download_parquet\", \"Parquet\", disabled=TRUE))\n  output$download_csv_placeholder &lt;- renderUI(actionButton(\"no_download_csv\", \"CSV\", disabled=TRUE))\n  \n  \n  observeEvent(input$file, {\n    req(input$file)\n    df &lt;- nanoparquet::read_parquet(input$file$datapath)  # read parquet file as dataframe\n    data(df)  # update DT table with df data\n    # replace disabled actions buttons w/download buttons\n    output$download_parquet_placeholder &lt;- renderUI(dbtn(\"download_parquet\", \"Parquet\"))  \n    output$download_csv_placeholder &lt;- renderUI(dbtn(\"download_csv\", \"CSV\"))\n    # Enable the action buttons\n    updateActionButton(session, \"add_row\", disabled = FALSE)\n    updateActionButton(session, \"del_row\", disabled = FALSE)\n    updateActionButton(session, \"show_add_col\", disabled = FALSE)\n    updateActionButton(session, \"add_col\", disabled = FALSE)\n  })\n  \n  output$table &lt;- renderDT({\n    req(data())\n    datatable(\n      data(),\n      editable = TRUE,\n      selection = list(mode = 'single', selected = NULL, target = 'row+column', selectable = NULL),\n      options = list(\n        dom = 'Bfrtip',\n        pageLength = 20,\n        scrollX = TRUE\n      )\n    )\n  }, server = FALSE)\n  \n  # Edit cell\n  observeEvent(input$table_cell_edit, {\n    info &lt;- input$table_cell_edit\n    df &lt;- data()\n    df[info$row, info$col] &lt;- DT::coerceValue(info$value, df[info$row, info$col])\n    data(df)\n  })\n  \n  # Add row\n  observeEvent(input$add_row, {\n    df &lt;- data()\n    df[nrow(df) + 1, ] &lt;- NA\n    data(df)\n  })\n  \n  # Delete row\n  observeEvent(input$del_row, {\n    req(input$table_rows_selected)\n    df &lt;- data()\n    df &lt;- df[-input$table_rows_selected, , drop = FALSE]\n    data(df)\n  })\n  \n  # Show add col inputs\n  observeEvent(input$show_add_col, {\n    toggle &lt;- input$show_add_col\n    if (toggle %% 2 == 1) {\n      output$add_col_inputs &lt;- renderUI({\n        div(\n          style = \"border: 1px solid #ddd; padding: 15px; background-color: #f9f9f9; border-radius: 5px;\",\n          textInput(\"new_col_name\", \"New Column Name\", placeholder='col1'),\n          selectInput(\"new_col_type\", \"New Column Type\",\n                      choices = c(\"character\", \"float\", \"integer\", \"logical\", \"date\", \"datetime\"),\n                      selected = \"character\"),\n          actionButton(\"add_col\", \"Add\", class = \"btn btn-success\"),\n          br(),\n          helpText(\"For datetime columns, enter values in the format %Y-%m-%dT%H:%M:%SZ (like `2025-12-31T23:59:59Z`)\")\n        )\n      })\n    } else {\n      output$add_col_inputs &lt;- renderUI(NULL)\n    }\n  })\n  \n  # Add col\n  observeEvent(input$add_col, {\n    req(input$new_col_name)\n    df &lt;- data()\n    new_col &lt;- make.names(input$new_col_name)\n    if (!(new_col %in% colnames(df))) {\n      df[[new_col]] &lt;-   switch(\n        input$new_col_type,\n        \"character\" = as.character(NA),\n        \"float\" = as.numeric(NA),\n        \"integer\" = as.integer(NA),\n        \"logical\" = as.logical(NA),\n        \"date\" = as.Date(NA),\n        \"datetime\" = Sys.time(),\n        NA\n      )\n      data(df)\n    } else {\n      showNotification(\"Column already exists\", type = \"error\")\n    }\n  })\n  \n  # Reorder cols\n  output$col_order_ui &lt;- renderUI({\n    req(data())\n    selectizeInput(\n      \"col_order\",\n      \"Drop/Reorder Cols:\",\n      choices = colnames(data()),\n      selected = colnames(data()),\n      multiple = TRUE,\n      options = list(plugins = list('drag_drop', 'remove_button'))\n    )\n  })\n  \n  # Reorder cols action\n  observeEvent(input$col_order, {\n    req(input$col_order)\n    df &lt;- data()\n    if (all(input$col_order %in% colnames(df))) {\n      data(df[, input$col_order, drop = FALSE])\n    }\n  })\n  \n  \n  \n  # Parquet download handler\n  output$download_parquet &lt;- downloadHandler(\n    filename = function() {\n      paste0(tools::file_path_sans_ext(input$file$name), \"_edited.parquet\")\n    },\n    content = function(file) {\n      nanoparquet::write_parquet(data(), file)\n    },\n    contentType = 'parquet'\n  )\n  \n  # CSV download handler\n  output$download_csv &lt;- downloadHandler(\n    filename = function() {\n      paste0(tools::file_path_sans_ext(input$file$name), \"_edited.csv\")\n    },\n    content = function(file) {\n      write.csv(data(), file, na=\"\", row.names=FALSE, )\n    },\n    contentType = 'csv'\n  )\n}\n\nshinyApp(ui, server)"
  }
]