[
  {
    "objectID": "viewer.html",
    "href": "viewer.html",
    "title": "Parquet Viewer",
    "section": "",
    "text": "Upload your parquet file to view and edit.\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\n\n# import app code\nlibrary(shiny)\nlibrary(DT)\n\ndbtn &lt;- function(...) {\n  btn &lt;- downloadButton(...)\n  btn$attribs$download &lt;- NULL\n  return(btn)\n}\n\nui &lt;- fluidPage(\n  fluidRow(\n        column(\n          width = 8,\n          fileInput(\"file\", \"Upload a .parquet file\", accept = \".parquet\", width = \"80%\")\n        ),\n        column(\n          width = 4,\n          div(style = \"height: 30px;\"), # empty space above button\n          uiOutput(\"download_placeholder\")\n        )\n  ),\n  hr(),\n  fluidRow(\n    column(\n      width = 12,\n      DTOutput(\"table\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactiveVal(NULL)\n  \n  # Place a disabled action button as download button initially\n  output$download_placeholder &lt;- renderUI(actionButton(\"no_download\", \"Download Edited Parquet\", disabled=TRUE))\n\n  observeEvent(input$file, {\n    req(input$file)\n    df &lt;- nanoparquet::read_parquet(input$file$datapath)  # read parquet file as dataframe\n    data(df)  # update DT table with df data\n    output$download_placeholder &lt;- renderUI(dbtn(\"download\", \"Download Edited Parquet\"))  # replace the disabled action btn w/ a download btn\n  })\n\n  output$table &lt;- renderDT({\n    req(data())\n    datatable(\n      data(),\n      editable = TRUE,\n      extensions = 'Buttons',\n      options = list(\n        dom = 'Bfrtip',\n        buttons = c('copy', 'csv'),\n        pageLength = 20,\n        scrollX = TRUE\n      )\n    )\n  }, server = FALSE)\n\n  # Allow editing\n  observeEvent(input$table_cell_edit, {\n    info &lt;- input$table_cell_edit\n    df &lt;- data()\n    df[info$row, info$col] &lt;- DT::coerceValue(info$value, df[info$row, info$col])\n    data(df)\n  })\n\n  # Download handler\n  output$download &lt;- downloadHandler(\n    filename = function() {\n      paste0(tools::file_path_sans_ext(input$file$name), \"_edited.parquet\")\n    },\n    content = function(file) {\n      nanoparquet::write_parquet(data(), file)\n    },\n    contentType = 'parquet'\n  )\n}\n\nshinyApp(ui, server)\n\n\n\n\ntest"
  }
]